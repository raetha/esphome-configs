## Based on https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome
##
## You can change the friendly name if you wish on line 7 below. The friendly name is how the device will show in HA 
## However the <name:> is how HA connects to the device eg. esp32-s3-box-3.local is the mDNS hostname for the device.
## Once added to HA changing the device name can lead to connection issues, between HA and the device.

substitutions:
  name: s3box3-satellite
  friendly_name: S3Box3 Satellite
  guest_wifi_qr_text: !secret guest_wifi_qr_text

  loading_illustration_file: https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/images/loading.png
  #loading_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/loading_320_240.png
  idle_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/idle_320_240.png
  listening_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/listening_320_240.png
  thinking_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/thinking_320_240.png
  replying_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/replying_320_240.png
  error_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/error_320_240.png
  timer_finished_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/timer_finished_320_240.png

  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_muted_phase_id: "12"
  voice_assist_timer_finished_phase_id: "20"

  # Models: alexa, hey_jarvis, okay_nabu, hey_mycroft
  micro_wake_word_model: okay_nabu
  
  #####  Days and months #####
  ## Change the values on the right to match your locale ##
  monday: Monday
  tuesday: Tuesday
  wednesday: Wednesday
  thursday: Thursday
  friday: Friday
  saturday: Saturday
  sunday: Sunday
  
  jan: January
  feb: February
  mar: March
  apr: April
  may: May
  jun: June
  jul: July
  aug: August
  sept: September
  oct: October
  nov: November
  dec: December
  ############# END OF SUBSTITUTIONS #################
  
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.2.0
  on_boot:
    priority: 600
    then:
      - lambda: id(led).turn_on().set_brightness(id(lcd_default_bightness).state /100).perform();
      - display.page.show: loading_page
      - component.update: s3_box_lcd
      - script.execute: saver_enabled
      - lambda: id(time_remaining_0).publish_state ("0:00:00");
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;

  project:
    name: "Raetha.S3Box3"
    version: "2025.02.01"

esp32:
  board: esp32s3box
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"

psram:
  mode: octal
  speed: 80MHz
  
api:
  on_client_connected:
    - lambda: id(api_connection) = true;
    - lambda: id(led).turn_on().set_brightness(id(lcd_default_bightness).state /100).perform();
    - component.update: s3_box_lcd
    - script.execute: saver_enabled
  on_client_disconnected:
    - lambda: id(api_connection) = false;
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    id: ota_esphome
    on_begin:
      - lambda: id(led).turn_on().set_brightness(1.0).set_transition_length(0).perform();
                id(led).loop();
      - display.page.show: ota_page
      - component.update: s3_box_lcd   
    password: !secret ota_password

logger:
  hardware_uart: USB_SERIAL_JTAG
  logs:
    text_sensor: WARN
    component: ERROR

wifi:
  # TODO - disable through fast_connect for BLE improv, uncomment ble lines
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret wifi_domain
  # use_address: ${wifi_use_address}
  fast_connect: true
  enable_btm: true
  enable_rrm: true
  # TODO - disable ap for BLE improv
  ap:
    ssid: ${name}
    password: s3box123
  on_connect:
    - lambda: id(wifi_connection) = true;
    #- delay: 5s  # Gives time for improv results to be transmitted
    #- ble.disable:
    - display.page.show: home_page
    - component.update: s3_box_lcd
    - switch.turn_on: speaker_enable
  on_disconnect:
    - lambda: id(wifi_connection) = false;
    #- ble.enable:

# TODO - disable captive_portal for BLE improv
captive_portal:      

# TODO - enable next 2 sections for BLE improv
#esp32_ble:
#  name: raetha-s3box3

#esp32_improv:
#  authorizer: none
#  on_start:
#    - display.page.show: home_page
#    - component.update: s3_box_lcd
#  on_provisioned:
#    - display.page.show: home_page
#    - component.update: s3_box_lcd
#  on_stop:
#    - display.page.show: home_page
#    - component.update: s3_box_lcd

button:
  - platform: restart
    name: "Restart"
    entity_category: config
    disabled_by_default : true
  - platform: factory_reset
    id: factory_reset_btn
    name: "Factory Reset"
    entity_category: config
    disabled_by_default : true

output:
  - platform: ledc
    pin: GPIO47
    id: backlight_output

light:
  - platform: monochromatic
    id: led
    name: LCD Backlight
    icon: "mdi:television"
    entity_category: config
    output: backlight_output
    restore_mode: ALWAYS_ON
    default_transition_length: 50ms
    
i2c:
  - id: bus_a
    sda: GPIO08
    scl: GPIO18
    scan: true
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 100kHz

  - id: bus_b
    sda: GPIO41
    scl: GPIO40
    scan: true
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 50kHz

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin:
      number: GPIO45
      ignore_strapping_warning: true
    i2s_bclk_pin: GPIO17
    i2s_mclk_pin: GPIO2

audio_adc:
  - platform: es7210
    id: es7210_adc
    i2c_id: bus_a
    bits_per_sample: 16bit
    sample_rate: 16000

audio_dac:
  - platform: es8311
    id: es8311_dac
    i2c_id: bus_a
    bits_per_sample: 16bit
    sample_rate: 48000

microphone:
  - platform: i2s_audio
    id: box_mic
    sample_rate: 16000
    i2s_din_pin: GPIO16
    bits_per_sample: 16bit
    adc_type: external

speaker:
  - platform: i2s_audio
    id: box_speaker
    i2s_dout_pin: GPIO15
    dac_type: external
    sample_rate: 48000
    bits_per_sample: 16bit
    channel: left
    audio_dac: es8311_dac
    buffer_duration: 100ms

media_player:
  - platform: speaker
    name: Media Player
    id: speaker_media_player
    volume_min: 0.5
    volume_max: 0.8
    announcement_pipeline:
      speaker: box_speaker
      format: FLAC
      sample_rate: 48000
      num_channels: 1  # S3 Box only has one output channel
    files:
      - id: timer_finished_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/timer_finished.flac
      - id: wake_word_triggered_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/wake_word_triggered.flac

micro_wake_word:
  vad:
  models:
    - ${micro_wake_word_model}
  on_wake_word_detected:
    # TODO - Attempt to restore playing audio
    #- if:
    #    condition:
    #      media_player.is_playing:
    #    then:
    #      - media_player.pause
    - if:
        condition:
          - switch.is_on: wake_sound
        then:
          - media_player.speaker.play_on_device_media_file:
              media_file: wake_word_triggered_sound
              announcement: true
          - wait_until:
            - media_player.is_idle:
          - delay: 150ms
    - voice_assistant.start:
        wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  media_player: speaker_media_player
  noise_suppression_level: 2
  auto_gain: 31dBFS
  # TODO - HA default is 2.0, BigBobbas is 4.0
  volume_multiplier: 4.0
  on_wake_word_detected:
    - voice_assistant.stop:
    - lambda: id(va).set_use_wake_word(false);
    - if:
        condition:
          and:
            - switch.is_on: wake_sound
        then:
          - media_player.speaker.play_on_device_media_file:
              media_file: wake_word_triggered_sound
              announcement: true
          - wait_until:
              - media_player.is_idle              
          - delay: 150ms
          - voice_assistant.start
          - display.page.show: listening_page
          - component.update: s3_box_lcd
  on_start:
    if: 
      condition:
        - display.is_displaying_page: listening_page
        - display.is_displaying_page: thinking_page
      then:
        - display.page.show: home_page
        - component.update: s3_box_lcd
  on_listening:
    - text_sensor.template.publish:
        id: text_request
        state: "..."
    - text_sensor.template.publish:
        id: text_response
        state: "..."
    - script.execute: saver_enabled
    - display.page.show: listening_page
    - component.update: s3_box_lcd
  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;
  on_stt_vad_end:
    - display.page.show: thinking_page
    - component.update: s3_box_lcd
  on_tts_start:
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
  on_tts_end:
    # TODO - possibly needed, update switch names
    #- if:
    #    condition: 
    #      and:
    #        - switch.is_on: mute_response_switch
    #        - switch.is_off: media_mute
    #        - switch.is_off: ext_media_mute
    #    then:
    #      - switch.turn_on: media_mute
    #      - switch.turn_on: ext_media_mute                  
    - display.page.show: replying_page
    - component.update: s3_box_lcd
    - delay: 5s
    - display.page.show: home_page
    - component.update: s3_box_lcd
  on_error:
    # TODO - Look at displaying error page using "code" and "message"
    - if:
        condition:
          not:
            - voice_assistant.is_running
        then:
          - display.page.show: error_page
          - component.update: s3_box_lcd
          - delay: 10s
          - if:
              condition:
                - display.is_displaying_page: error_page
              then:
                - display.page.show: home_page
                - component.update: s3_box_lcd
  on_idle:
    - display.page.show: home_page
    - component.update: s3_box_lcd 
  on_end:
    - if:
        condition:
          - switch.is_off: mic_mute_switch
        then:
          - voice_assistant.stop
          - wait_until:
              not:
                voice_assistant.is_running:
          - delay: 100ms
          - micro_wake_word.start
    # TODO - possibly needed, update switch names
    #- if:
    #    condition: 
    #      and:
    #        - switch.is_on: mute_response_switch
    #        - switch.is_on: media_mute
    #        - switch.is_on: ext_media_mute
    #    then:
    #       - switch.turn_off: media_mute
    #       - switch.turn_off: ext_media_mute 
    # TODO - Attempt to restore playing audio
    #- if:
    #    condition:
    #      media_player.is_paused:
    #    then:
    #      - media_player.play
  on_client_connected:
    # TODO - enable for BLE improv
    #- wait_until:
    #    not: ble.enabled
    #- delay: 2s
    #- lambda: id(init_in_progress) = false;
    - if:
        condition:
          and:
            - switch.is_off: mic_mute_switch
        then:
          - micro_wake_word.start 
  on_timer_started:
    - script.execute: timer_ending
    - component.update: s3_box_lcd
  on_timer_cancelled:
    - lambda: id(time_remaining_0).publish_state ("0:00:00"); 
    - component.update: s3_box_lcd
  on_timer_updated:
    - component.update: s3_box_lcd
  on_timer_tick:
    - lambda: |-
        int seconds = timers[0].seconds_left;
        int hours = seconds / 3600;
        int minutes = (seconds % 3600) / 60;
        seconds %= 60;
        id(time_remaining_0).publish_state(str_sprintf("%d:%02d:%02d", hours, minutes, seconds)); 
    - component.update: s3_box_lcd
  on_timer_finished:
    - switch.turn_on: timer_ringing
    - display.page.show: timer_finished_page
    - component.update: s3_box_lcd

script:
  - id: start_voice_assistant
    then:
      - if:
          condition:
            switch.is_off: mic_mute_switch
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
            - micro_wake_word.start:

  - id: stop_voice_assistant
    then:
      - voice_assistant.stop:
      - micro_wake_word.stop:

  - id: set_volume
    then:
      - media_player.volume_set:
          volume: !lambda return 0.5 + id(speaker_volume) * 0.05 ;
          
  - id: saver_enabled
    then:
      - if:
          condition: 
            switch.is_on: lcd_idle_switch 
          then:
            - lambda: id(led).turn_on().set_brightness(id(lcd_default_bightness).state /100).perform();
            - delay: !lambda return id(lcd_idle_delay).state * 1000;
            - lambda: id(led).turn_on().set_brightness(id(lcd_idle_bightness).state /100).perform();
            - display.page.show: saver_page
            - component.update: s3_box_lcd
      - if:
          condition:
            - switch.is_on: lcd_off_switch            
          then:
            - delay: !lambda return id(lcd_off_delay).state * 1000;
            - light.turn_off: led
            - component.update: s3_box_lcd
    mode: restart

  - id: saver_enabled_manual
    then:
      - if:
          condition: 
            - switch.is_on: lcd_idle_switch 
          then:
            - lambda: id(led).turn_on().set_brightness(id(lcd_idle_bightness).state /100).perform();
            - display.page.show: saver_page
            - component.update: s3_box_lcd
      - if:
          condition:
            - switch.is_on: lcd_off_switch            
          then:
            - delay: !lambda return id(lcd_off_delay).state * 1000;
            - light.turn_off: led
            - component.update: s3_box_lcd
    mode: restart 
 
  - id: timer_ending
    then:
      - wait_until: 
            - lambda: return (id(time_remaining_0).state == "0:00:15");
      - script.execute: saver_enabled
      - display.page.show: timer_countdown_page
      - component.update: s3_box_lcd

  - id: display_status_bar
    then:
      - lambda: |-
          if(id(api_connection) == true) {
            s3_box_lcd->printf(s3_box_lcd->get_width() * 0.1, 10, id(mdi_icons_45), blue, TextAlign::TOP_CENTER, "\U000F07D0");
          } else {
            s3_box_lcd->printf(s3_box_lcd->get_width() * 0.1, 10, id(mdi_icons_45), red, TextAlign::TOP_CENTER, "\U000F07D0");
          }
          if(id(wifi_connection) == true) {
            if(id(wifi_rssi).state >= -66.5) {
              s3_box_lcd->printf(s3_box_lcd->get_width() * 0.3, 5, id(google_icons_45), lime, TextAlign::TOP_CENTER, "\U0000e63e");
            } else if(id(wifi_rssi).state > -83.5 && id(wifi_rssi).state < -66.5) {
              s3_box_lcd->printf(s3_box_lcd->get_width() * 0.3, 5, id(google_icons_45), lime, TextAlign::TOP_CENTER, "\U0000e4d9");
            } else if(id(wifi_rssi).state <= -83.5) {
              s3_box_lcd->printf(s3_box_lcd->get_width() * 0.3, 5, id(google_icons_45), lime, TextAlign::TOP_CENTER, "\U0000e4ca");
            }
          } else {
            s3_box_lcd->printf(s3_box_lcd->get_width() * 0.3, 5, id(google_icons_45), red, TextAlign::TOP_CENTER, "\U0000f063");
          }
          //if(id(time_remaining_0).state == "0:00:00"){
          //  s3_box_lcd->printf(s3_box_lcd->get_width() * 0.5, 10, id(mdi_icons_45), red, TextAlign::TOP_CENTER, "\U000F051E");
          //} else {
          //  s3_box_lcd->printf(s3_box_lcd->get_width() * 0.5, 10, id(mdi_icons_45), lime, TextAlign::TOP_CENTER, "\U000F051B");
          //}
          if(id(mic_mute_switch).state) {
            s3_box_lcd->printf(s3_box_lcd->get_width() * 0.5, 10, id(mdi_icons_45), red, TextAlign::TOP_CENTER, "\U000F036D"); 
          } else {
            s3_box_lcd->printf(s3_box_lcd->get_width() * 0.5, 10, id(mdi_icons_45), lime, TextAlign::TOP_CENTER, "\U000F036C"); 
          }
          if(id(speaker_mute_switch).state) {
            s3_box_lcd->printf(s3_box_lcd->get_width() * 0.7, 10, id(mdi_icons_45), red, TextAlign::TOP_CENTER, "\U000F0581");
          } else {        
            s3_box_lcd->printf(s3_box_lcd->get_width() * 0.7, 10, id(mdi_icons_45), lime, TextAlign::TOP_CENTER, "\U000F057E");
          }
          s3_box_lcd->printf(s3_box_lcd->get_width() * 0.9, 10, id(mdi_icons_45), blue, TextAlign::TOP_CENTER, "\U000F0493");

switch:
  - platform: gpio
    name: "Speaker Enable"
    id: speaker_enable
    pin:
      number: GPIO46
      ignore_strapping_warning: true
    restore_mode: ALWAYS_OFF
    entity_category: config
    disabled_by_default: true

  - platform: template
    id: display_conversation_switch
    name: "Display Conversation"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    icon: 'mdi:chat'

  # This is the master mute switch. It is exposed to Home Assistant. The user can only turn it on and off if the hardware switch is off. (The hardware switch overrides the software one)
  - platform: template
    name: "Mute Mic"
    id: mic_mute_switch
    icon: "mdi:microphone-off"
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    turn_on_action:
      - if:
          condition:
            binary_sensor.is_off: hardware_mute_switch
          then:
            - switch.template.publish:
                id: mic_mute_switch
                state: ON
    turn_off_action:
      - if:
          condition:
            binary_sensor.is_off: hardware_mute_switch
          then:
            - switch.template.publish:
                id: mic_mute_switch
                state: OFF
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
            - if:
                condition:
                  not:
                    - voice_assistant.is_running
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - micro_wake_word.start
            - component.update: s3_box_lcd
    on_turn_on:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop
            - micro_wake_word.stop
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
            - component.update: s3_box_lcd

  - platform: template
    id: speaker_mute_switch
    name: "Mute Speaker"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:   
      media_player.volume_set:    
        id: speaker_media_player
        volume: 0
    on_turn_off:
      media_player.volume_set: 
        id: speaker_media_player
        volume: 1.0       

  - platform: template
    id: lcd_idle_switch
    name: "LCD Idle Enabled"
    icon: mdi:sleep
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
     
  - platform: template
    id: lcd_off_switch
    name: "LCD Off Enabled"
    icon: 'mdi:monitor-off'
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
     
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      # Turn off the repeat mode and disable the pause between playlist items
      - lambda: |-
              id(speaker_media_player)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      # Stop playing the alarm
      - media_player.stop:
          announcement: true
    on_turn_on:
      - lambda: id(led).turn_on().set_brightness(1.0).perform();
      # Turn on the repeat mode and pause for 1000 ms between playlist items/repeats
      - lambda: |-
            id(speaker_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_sound
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

  # TODO - May need to disable until supported
  - platform: template
    id: wake_sound
    name: "Wake Sound"
    icon: mdi:music
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    id: mute_response_switch
    name: Mute Responses
    icon: mdi:chat-sleep
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF 
   
  - platform: template
    id: response_mute_switch
    name: "Mute Responses"
    icon: mdi:chat-sleep
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

select:
  - platform: template
    entity_category: config
    name: "Time Format"
    id: time_format
    optimistic: true
    restore_value: true
    options:
      - 12 Hr
      - 24 Hr
    initial_option: 24 Hr
    on_value:
      - if:
          condition:
            lambda: return x == "24 Hr";
          then:
            - text_sensor.template.publish:
                id: time_display_format
                state: !lambda 'return "24 Hr";'
          else:
            - text_sensor.template.publish:
                  id: time_display_format
                  state: !lambda 'return "12 Hr";'
      - component.update: s3_box_lcd

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer_active
    type: bool
    restore_value: false
  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer
    type: bool
    restore_value: false    
  - id: wifi_connection
    type: bool
    restore_value: no
    initial_value: "false"
  - id: api_connection
    type: bool
    restore_value: no
    initial_value: "false" 
  - id: mute_value
    type: bool
    restore_value: no
    initial_value: "false" 
  - id: speaker_volume
    type: int
    restore_value: no
    initial_value: '5'
  - id: media_state
    type: bool
    restore_value: no
    initial_value: "false"

image:
  - file: ${error_illustration_file}
    id: casita_error
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${idle_illustration_file}
    id: casita_idle
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${listening_illustration_file}
    id: casita_listening
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${thinking_illustration_file}
    id: casita_thinking
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${replying_illustration_file}
    id: casita_replying
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${timer_finished_illustration_file}
    id: casita_timer_finished
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${loading_illustration_file}
    id: casita_initializing
    resize: 320x240
    type: RGB
    transparency: alpha_channel

font:
  - file: "gfonts://Inconsolata"
    id: my_font_14
    size: 14
    ##### If extended characters are needed, uncomment and add glyphsets to all gfonts entries #####
    # glyphsets:
    #   - GF_Latin_Core
  - file: "gfonts://Inconsolata"
    id: my_font_16
    size: 16
  - file: "gfonts://Inconsolata"
    id: my_font_18
    size: 18
  - file: "gfonts://Inconsolata"
    id: my_font_22
    size: 22
  - file: "gfonts://Inconsolata"
    id: my_font_28
    size: 28
  - file: "gfonts://Inconsolata"
    id: my_font_40
    size: 40
  - file: "gfonts://Inconsolata"
    id: my_font_50
    size: 50
  - file: "gfonts://Inconsolata"
    id: my_font_72
    size: 72
  - file: "gfonts://Inconsolata"
    id: my_font_82
    size: 82
  - file: "gfonts://Material+Symbols+Outlined"
    id: google_icons_45
    size: 45
    glyphs: &google_icons_glyphs
      - "\U0000e63e" # wifi
      - "\U0000e4d9" # wifi 2 bar
      - "\U0000e4ca" # wifi 1 bar
      - "\U0000f063" # signal wifi bad
  - file: "https://pictogrammers.github.io/@mdi/font/7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: mdi_icons_45
    size: 45
    glyphs: &mdi_icons_glyphs
      - "\U000F07D0" # home-assistant
      - "\U000F0B05" # alpha-x
      #- "\U000F05A9" # wifi
      #- "\U000F16B5" # wifi-alert
      #- "\U000F051B" # timer-outline
      #- "\U000F051E" # timer-off-outline
      - "\U000F036C" # microphone
      - "\U000F036D" # microphone-off
      - "\U000F057E" # volume-high
      - "\U000F0581" # volume-off
      - "\U000F075D" # volume-plus
      - "\U000F075E" # volume-minus
      - "\U000F040A" # play
      - "\U000F03E4" # pause
      - "\U000F0432" # qrcode
      - "\U000F0493" # cog
  - file: "https://pictogrammers.github.io/@mdi/font/7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: mdi_icons_75
    size: 75
    glyphs: *mdi_icons_glyphs
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
    id: icon_font_45
    size: 45
    glyphs: &icon_glyphs
      - "\U000F0079"#battery 100%
      - "\U000F007A"#battery 10%
      - "\U000F007B"#battery 20%
      - "\U000F007C"#battery 30%
      - "\U000F007D"#battery 40%
      - "\U000F007E"#battery 50%
      - "\U000F007F"#battery 60%
      - "\U000F0080"#battery 70%
      - "\U000F0081"#battery 80%
      - "\U000F0082"#battery 90%
      - "\U000F009E"#bell
      - "\U000F0150"#clock
      - "\U000F01AE"#gbp pound symbol
      - "\U000F0210"#fan
      - "\U000F0238"#heating
      - "\U000F024A"#garden/flower
      - "\U000F0335"#light bulb off
      - "\U000F036C"#microphone on 
      - "\U000F036D"#microphone off 
      - "\U000F036F"#voice settings
      - "\U000F03E4"#pause
      - "\U000F040A"#play
      - "\U000F040E"#play/pause
      - "\U000F0493"#settings cog
      - "\U000F04AD"#next track
      - "\U000F04AE"#previous track
      - "\U000F04B9"#living room
      - "\U000F04C8"#spots
      - "\U000F04DB"#stop
      - "\U000F0502"#screen settings
      - "\U000F050F"#temp sensor
      - "\U000F0521"#toggle on
      - "\U000F0565"#arming
      - "\U000F057E"#speaker on
      - "\U000F0581"#speaker off
      - "\U000F05CB"#voice
      - "\U000F068A"#alarm home
      - "\U000F06E8"#light bulb illuminated
      - "\U000F075A"#music 
      - "\U000F075D"#vol plus
      - "\U000F075E"#vol minus
      - "\U000F0769"#ceiling
      - "\U000F07D0"#api connected
      - "\U000F07F4"#tv
      - "\U000F0873"#car miles non
      - "\U000F0874"#car miles full
      - "\U000F0875"#car miles low
      - "\U000F087B"#api disconnected
      - "\U000F08D6"#settings
      - "\U000F099D"#alarm away
      - "\U000F099E"#disarmed
      - "\U000F0A19"#toggle off
      - "\U000F0B26"#down
      - "\U000F0B28"#left
      - "\U000F0B2A"#right
      - "\U000F0B2C"#up
      - "\U000F0B6C"#car battery
      - "\U000F0D90"#screen off
      - "\U000F0EBA"#stats
      - "\U000F0ED4"#voice off
      - "\U000F0FCE"#scene
      - "\U000F1061"#dining
      - "\U000F10CD"#battery warning
      - "\U000F1160"#kitchen
      - "\U000F12A8"#touch button
      - "\U000F12D3"#garage closed
      - "\U000F12D4"#garage open
      - "\U000F1322"#tools
      - "\U000F16BC"#wifidisconnected
      - "\U000F16BD"#wifi connected
      - "\U000F1722"#fire off
      - "\U000F1747"#tall lamp
      - "\U000F1828"#armed night
      - "\U000F192D"#electricity
      - "\U000F1987"#floods
      - "\U000F1A12"#home button
      - "\U000F1A1B"#gas
      - "\U000F1C3B"#battery charging/usb powered
      - "\U000F1C6F"#info
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
    id: icon_font_60
    size: 60
    glyphs: *icon_glyphs
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
    id: icon_font_75
    size: 75
    glyphs: *icon_glyphs
  - file: "https://github.com/BigBobbas/ESP32-S3-Box3-Custom-ESPHome/raw/main/fonts/materialdesignicons-webfont.ttf"
    id: icon_font_180
    size: 180
    glyphs: *icon_glyphs

text_sensor:
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>32) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>32) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

  - platform: wifi_info
    ip_address:
      name: IP Address
      id: ip_addr
      entity_category: "diagnostic"
      internal: true
    ssid:
      id: connected_ssid
      name: SSID
      entity_category: "diagnostic"
      internal: true
    bssid:
      id: connected_bssid
      name: BSSID
      entity_category: "diagnostic"
      internal: true
    mac_address:
      id: device_mac
      internal: true

  - platform: template
    id: up_sens_text
    name: Device uptime
    entity_category: "diagnostic"
    icon: mdi:clock

  - platform: template
    id: time_remaining_0
    name: Timer 
    icon: mdi:clock

  - platform: template
    id: time_remaining_1

  - platform: template
    id: time_display_format
    update_interval: never

  # TODO - Disabled, but could be useful to display media info
  #- platform: homeassistant
  #  entity_id: media_player.${external_media_player}
  #  id: ha_media_status
  #  on_value:
  #    component.update: s3_box_lcd

  #- platform: homeassistant
  #  entity_id: media_player.${external_media_player}
  #  id: ha_media_title
  #  attribute: media_content_id
  #  on_value:
  #    component.update: s3_box_lcd 

color:
  - id: green
    hex: '75D15F'
  - id: red
    hex: 'FF3131'
  - id: blue
    hex: '47B7E9'
  - id: blue_drk
    hex: '085296'
  - id: amber
    hex: 'FBAB35'
  - id: lime
    hex: '20FC30'
  - id: pink
    hex: 'D92BBC'
  - id: yellow
    hex: 'FFC000'
  # - id: black
  #   hex: '000000'
  # - id: white
  #   hex: 'ffffff'
  - id: purple
    hex: '73264D'
  - id: light_blue
    hex: 'CFE2F3'
  - id: bg_blue
    hex: '032341'
  - id: bg_purple
    hex: '301020'
  - id: bg_green
    hex: '05350B'
  - id: bg_red
    hex: '3C0000'
  - id: bg_pink
    hex: '61034D'
  - id: bg_charcoal
    hex: '323232'
  - id: bg_brown
    hex: '41220D'
  - id: bg_grey
    hex: '4F4F4F'

spi:
  - id: spi_bus
    clk_pin: 7
    mosi_pin: 6

time:
  - platform: homeassistant
    id: ha_time
    
interval:
  - interval: 30s
    then:
      - component.update: s3_box_lcd
  - interval: 10s
    then:
      - if:
          condition:
            - lambda: 'return { (id(api_connection) != true) };'
          then:
            - if:
                condition:
                  api.connected:
                then:
                  - lambda: "id(api_connection) = true;"
          else:
            - if:
                condition:
                  not:
                    api.connected:
                then:
                  - lambda: "id(api_connection) = false;"
  - interval: 10s
    then:
      - if:
          condition:
            - lambda: 'return { (id(wifi_connection) != true) };'
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - lambda: "id(wifi_connection) = true;"
          else:
            - if:
                condition:
                  not:
                    wifi.connected:
                then:
                  - lambda: "id(wifi_connection) = false;"

qr_code:
  - id: guest_wifi_qr_code
    value: ${guest_wifi_qr_text}

number:
  - id: lcd_idle_delay
    platform: template
    name: "LCD Idle Delay"
    icon: 'mdi:sleep'
    entity_category: config
    unit_of_measurement: 'secs'
    optimistic: true
    restore_value: true
    initial_value: 30
    step: 5
    min_value: 10
    max_value: 999999
    on_value:
      - component.update: s3_box_lcd
      - component.update: lcd_idle_delay
      - script.execute: saver_enabled
      
  - id: lcd_off_delay
    platform: template
    name: "LCD Off Delay"
    icon: 'mdi:monitor-off'
    entity_category: config
    unit_of_measurement: 'secs'
    optimistic: true
    restore_value: true
    initial_value: 30
    step: 5
    min_value: 10
    max_value: 999999
    on_value:
      - component.update: lcd_off_delay
      - script.execute: saver_enabled
      - component.update: s3_box_lcd
      
  - id: lcd_idle_bightness
    platform: template
    name: "LCD Idle Brightness"
    icon: 'mdi:sleep'
    entity_category: config
    unit_of_measurement: '%'
    optimistic: true
    restore_value: true
    initial_value: 30
    step: 5
    min_value: 20
    max_value: 100
    on_value:
      - component.update: lcd_idle_bightness
      - script.execute: saver_enabled
      - component.update: s3_box_lcd
      
  - id: lcd_default_bightness
    platform: template
    name: "LCD Brightness"
    icon: 'mdi:monitor'
    entity_category: config
    unit_of_measurement: '%'
    optimistic: true
    restore_value: true
    initial_value: 100
    step: 5
    min_value: 20
    max_value: 100
    on_value:
      - component.update: lcd_default_bightness
      - script.execute: saver_enabled
      - component.update: s3_box_lcd

sensor:
  - platform: uptime
    id: up_sens
    on_value:
      - lambda: |-
          int seconds = id(up_sens).state;
          int days = seconds / 86400;
          int hours = seconds / 3600;
          int minutes = (seconds % 3600) / 60;
          seconds %= 60;
          // id(up_sens_text).publish_state(str_sprintf("%03d:%02d:%02d:%02d", days, hours, minutes, seconds)); 
          id(up_sens_text).publish_state(str_sprintf("%03d:%02d:%02d", days, hours, minutes)); 
    update_interval: 300s

  - platform: wifi_signal
    name: "RSSI"
    id: wifi_rssi
    update_interval: 5min
    internal: true
    filters:
      - median:
          window_size: 5

display:
  - platform: ili9xxx
    id: s3_box_lcd
    model: S3BOX
    invert_colors: false
    data_rate: 40MHz
    cs_pin: 5
    dc_pin: 4
    reset_pin:
      number: 48
      inverted: true
    update_interval: never
    ##################################################################################################
    ################ The below section defines, what is displayed on the screen,        ##############
    ################ the colours and mdi icons are defined above under font: and Color: ##############
    ################ they are then referenced in the config below.                      ##############
    ##################################################################################################
    pages:
      - id: home_page ##### home page ######
        lambda: |-
          it.fill(Color::BLACK);
          id(display_status_bar).execute();
          it.printf(20, 100, id(mdi_icons_75), blue,"\U000F075E");
          if(id(media_state) == true) {
            it.printf(160, 85, id(my_font_22), lime, TextAlign::CENTER, "Playing");
            it.printf(120, 100, id(mdi_icons_75), blue,"\U000F03E4" );
          } else {
            it.printf(160, 85, id(my_font_22), light_blue, TextAlign::CENTER, "Nothing Playing");
            it.printf(120, 100, id(mdi_icons_75), blue,"\U000F040A" );
          }
          it.printf(220, 100, id(mdi_icons_75), blue,"\U000F075D");
          if(id(time_remaining_0).state != "0:00:00"){
            it.printf(it.get_width() * 0.3, it.get_height() - 10, id(my_font_40), lime, TextAlign::BOTTOM_CENTER, "%s", id(time_remaining_0).state.c_str());
          }
          it.printf(it.get_width() * 0.9, it.get_height() - 10, id(mdi_icons_45), blue, TextAlign::BOTTOM_CENTER, "\U000F0432");

      - id: info_page ##### info page #####
        lambda: |-
          it.fill(Color::BLACK);
          id(display_status_bar).execute();
          it.printf(160, 75, id(my_font_22), light_blue, TextAlign::CENTER, "IP Address");
          it.printf(160, 95, id(my_font_22), yellow, TextAlign::CENTER, "%s", id(ip_addr).state.c_str());
          it.printf(160, 125, id(my_font_22), light_blue, TextAlign::CENTER, "Host Name");
          it.printf(160, 145, id(my_font_22), yellow, TextAlign::CENTER, "${name}.local");
          it.printf(160, 175, id(my_font_22), light_blue, TextAlign::CENTER, "Device Uptime DDD:H:M");
          it.printf(160, 195, id(my_font_22), yellow, TextAlign::CENTER, "%s", id(up_sens_text).state.c_str());

      - id: ss_set_page ##### screen saver settings page #####
        lambda: |-
          it.fill(Color::BLACK);
          it.printf(160, 10, id(my_font_22), light_blue, TextAlign::TOP_CENTER, "Screensaver Settings");
          it.printf(250, 115, id(my_font_22), light_blue, TextAlign::RIGHT, "Timeout Settings :");
          it.printf(255, 95, id(icon_font_45), lime, "\U000F08D6");
          it.printf(250, 145, id(my_font_22), light_blue, TextAlign::RIGHT, "Enable screensaver :");
          if(id(lcd_idle_switch).state) {
                 it.printf(255, 135, id(icon_font_45), lime, "\U000F0521");
          } else {   
                 it.printf(255, 135, id(icon_font_45), blue_drk, "\U000F0A19");
          } 
          it.printf(250, 205, id(my_font_22), light_blue, TextAlign::RIGHT, "Timeout to blank :");          
          if(id(lcd_off_switch).state) {
                 it.printf(255, 195, id(icon_font_45), lime, "\U000F0521");
          } else {   
                 it.printf(255, 195, id(icon_font_45), blue_drk, "\U000F0A19");
          }
          
      - id: timeout_settings_page ##### Timeout Settings page #####
        lambda: |-
          it.fill(Color::BLACK);
          it.printf(160, 10, id(my_font_22), light_blue, TextAlign::TOP_CENTER, "Screen Settings");  
          it.printf(50, 80, id(my_font_14), light_blue, "Delay secs");
          it.printf(185, 80, id(my_font_14), light_blue, "Dim Brightness");
          it.printf(105, 100, id(icon_font_45), lime, TextAlign::LEFT, "\U000F0B2C");    
          it.printf(65, 100, id(icon_font_45), lime, TextAlign::RIGHT, "\U000F0B26");          
          it.rectangle(65 , 105 , 40 , 40 , lime);
          it.printf(85, 125, id(my_font_22), light_blue, TextAlign::CENTER, "%.f", id(lcd_idle_delay).state);
          it.printf(20, 160, id(my_font_14), light_blue, "Screen off delay"); 
          it.printf(105, 180, id(icon_font_45), lime, TextAlign::LEFT, "\U000F0B2C");    
          it.printf(65, 180, id(icon_font_45), lime, TextAlign::RIGHT, "\U000F0B26");          
          it.rectangle(65 , 180 , 40 , 40 , lime);
          it.printf(85, 200, id(my_font_22), light_blue, TextAlign::CENTER, "%.f", id(lcd_off_delay).state);
          it.printf(255, 100, id(icon_font_45), pink, TextAlign::LEFT, "\U000F0B2C");    
          it.printf(215, 100, id(icon_font_45), pink, TextAlign::RIGHT, "\U000F0B26");          
          it.rectangle(215 , 105 , 40 , 40 , pink);
          it.printf(235, 125, id(my_font_22), light_blue, TextAlign::CENTER, "%.f", id(lcd_idle_bightness).state);

      - id: ww_set_page ##### voice settings page #####
        lambda: |-
          it.fill(Color::BLACK);
          it.printf(160, 50, id(icon_font_45), light_blue, TextAlign::CENTER, "\U000F08D6");  
          it.printf(160, 20, id(my_font_22), light_blue, TextAlign::CENTER, "Voice Settings");
          it.printf(155, 85, id(my_font_22), light_blue, TextAlign::CENTER, "tap to change");
          it.printf(250, 145, id(my_font_22), light_blue, TextAlign::RIGHT, "Mute responses :"); 
          if(id(response_mute_switch).state) {
                 it.printf(255, 135, id(icon_font_45), lime, "\U000F0521");
          } else {   
                 it.printf(255, 135, id(icon_font_45), blue_drk, "\U000F0A19");
          }
          // TODO - Disabled until able to support wake sound
          //it.printf(250, 175, id(my_font_22), light_blue, TextAlign::RIGHT, "Wake up sound :");          
          //if(id(wake_sound).state) {
          //       it.printf(255, 165, id(icon_font_45), lime, "\U000F0521");
          //} else {   
          //       it.printf(255, 165, id(icon_font_45), blue_drk, "\U000F0A19");
          //} 
          it.printf(250, 205, id(my_font_22), light_blue, TextAlign::RIGHT, "Show Conversation :");          
          if(id(display_conversation_switch).state) {
                 it.printf(255, 195, id(icon_font_45), lime, "\U000F0521");
          } else {   
                 it.printf(255, 195, id(icon_font_45), blue_drk, "\U000F0A19");
          }

      - id: loading_page ##### loading page #####
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_initializing), ImageAlign::CENTER);

      - id: listening_page
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_listening), ImageAlign::CENTER);
      
      - id: thinking_page
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_thinking), ImageAlign::CENTER);
          if (id(display_conversation_switch).state) {
            it.filled_rectangle(0 , 0 , 320 , 30 , Color::WHITE );
            it.printf(10, 10, id(my_font_16), Color::BLACK, "%s", id(text_request).state.c_str());
          }          

      - id: replying_page
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_replying), ImageAlign::CENTER);
          if (id(display_conversation_switch).state) {
            it.filled_rectangle(0 , 0 , 320 , 30 , Color::WHITE );
            it.filled_rectangle(0 , 210 , 320 , 30 , Color::WHITE );
            it.printf(10, 10, id(my_font_16), Color::BLACK, "%s", id(text_request).state.c_str());
            it.printf(10, 220, id(my_font_16), Color::BLACK, "%s", id(text_response).state.c_str());
          }

      - id: error_page
        lambda: |-
          it.fill(Color::BLACK);
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_error), ImageAlign::CENTER);

      - id: timer_finished_page
        lambda: |-
          it.fill(Color::BLACK);
          it.printf(160, 20, id(my_font_22), light_blue, TextAlign::CENTER, "Timer Finished");
          it.printf(160, 120, id(icon_font_180), light_blue, TextAlign::CENTER, "\U000F009E");
          it.printf(160, 215, id(my_font_22), light_blue, TextAlign::CENTER, "tap screen to dismiss");

      - id: saver_page ##### screen saver display page #####
        lambda: |-
          it.fill(Color::BLACK);
          const char *days[] {"${sunday}","${monday}","${tuesday}","${wednesday}","${thursday}","${friday}","${saturday}"};
          const char *months[] {"${jan}","${feb}","${mar}","${apr}","${may}","${jun}","${jul}","${aug}","${sept}","${oct}","${nov}","${dec}"};
          it.printf(it.get_width()/2, it.get_height()/5, id(my_font_22), light_blue, TextAlign::CENTER, "%s, %s %d", days[id(ha_time).now().day_of_week - 1], months[id(ha_time).now().month - 1], id(ha_time).now().day_of_month);
          if(id(time_display_format).state == "24 Hr") {
            it.strftime(it.get_width()/2, it.get_height()/2, id(my_font_82), TextAlign::CENTER, "%H:%M", id(ha_time).now());
          } else {
            it.strftime(it.get_width()/2, it.get_height()/2, id(my_font_72), TextAlign::CENTER, "%l:%M%p", id(ha_time).now());
          }

      - id: ota_page ##### firmware uploading page #####
        lambda: |-
          it.fill(Color::BLACK);
          it.printf(it.get_width() * 0.5, it.get_height() * 0.2, id(my_font_28), red, TextAlign::CENTER, "UPDATING FIRMWARE");
          it.printf(it.get_width() * 0.5, it.get_height() * 0.5, id(icon_font_75), red, TextAlign::CENTER, "\U000F08D6");
          it.printf(it.get_width() * 0.5, it.get_height() * 0.8, id(my_font_28), red, TextAlign::CENTER, "please wait...");
          
      - id: settings_page ##### settings parent page #####
        lambda: |-
          it.fill(Color::BLACK);
          id(display_status_bar).execute();
          it.printf(15, 130, id(my_font_22), light_blue,"Voice");
          it.printf(20, 80, id(icon_font_45), light_blue,"\U000F036F");
          it.printf(135, 130, id(my_font_22), light_blue,"Saver");
          it.printf(140, 80, id(icon_font_45), light_blue,"\U000F0502");
          it.printf(245, 130, id(my_font_22), light_blue, "Info");           
          it.printf(255, 80, id(icon_font_45), light_blue, "\U000F1C6F");  
          it.printf(15, 210, id(my_font_22), light_blue,"Device");
          it.printf(20, 160, id(icon_font_45), light_blue,"\U000F08D6");        
          it.printf(245, 210, id(my_font_22), light_blue, "Test"); 
          it.printf(255, 160, id(icon_font_45), light_blue, "\U000F05CB");

      - id: device_set_page ##### Device settings page #####
        lambda: |-
          it.fill(Color::BLACK);
          id(display_status_bar).execute();
          it.printf(5, 190, id(icon_font_45), light_blue, "\U000F0B28");
          it.printf(15, 135, id(my_font_22), light_blue, "Brightness");          
          it.printf(238, 148, id(my_font_22), light_blue, TextAlign::CENTER, "%.f", id(lcd_default_bightness).state);  
          it.printf(160, 125, id(icon_font_45), lime, TextAlign::LEFT, "\U000F0B2C");    
          it.printf(315, 125, id(icon_font_45), lime, TextAlign::RIGHT, "\U000F0B26");           
          it.rectangle(215 , 125 , 46 , 40 , light_blue);
          it.printf(65, 180, id(my_font_22), light_blue, "Time Format:");
          it.printf(210, 180, id(my_font_22), lime, "%s", id(time_display_format).state.c_str());

      - id: timer_countdown_page ##### timer countdown page #####
        lambda: |-
          it.fill(Color::BLACK);
          it.printf(it.get_width() * 0.5, it.get_height() * 0.5, id(my_font_72), light_blue, TextAlign::CENTER, "%s", id(time_remaining_0).state.c_str()); 

      - id: wifi_page ##### wifi info page #####
        lambda: |-
          it.fill(Color::BLACK);
          id(display_status_bar).execute();
          it.printf(160, 75, id(my_font_22), light_blue, TextAlign::CENTER, "ssid");
          it.printf(160, 95, id(my_font_22), yellow, TextAlign::CENTER, "%s", id(connected_ssid).state.c_str());
          it.printf(160, 125, id(my_font_22), light_blue, TextAlign::CENTER, "bssid");
          it.printf(160, 145, id(my_font_22), yellow, TextAlign::CENTER, "%s", id(connected_bssid).state.c_str());
          it.printf(160, 175, id(my_font_22), light_blue, TextAlign::CENTER, "Device MAC");
          it.printf(160, 195, id(my_font_22), yellow, TextAlign::CENTER, "%s", id(device_mac).state.c_str());
          it.printf(38, 210, id(my_font_22), light_blue, TextAlign::LEFT, "Signal Strength");
          it.printf(283, 210, id(my_font_22), yellow, TextAlign::RIGHT, "%4.f%%", id(wifi_rssi).state);

      - id: guest_wifi_page
        lambda: |-
          it.fill(Color::BLACK);
          id(display_status_bar).execute();
          // Draw the QR-code in the center of the screen with white color and a 2x scale
          auto size = id(guest_wifi_qr_code).get_size() * 4; // Multiply by scale
          auto x = (it.get_width() / 2) - (size / 2);
          auto y = (it.get_height() / 2) - (size / 2);
          it.qr_code(x, y + 10, id(guest_wifi_qr_code), Color(255,255,255), 4);
          it.printf(it.get_width() / 2, it.get_height() - 10, id(my_font_22), light_blue, TextAlign::BOTTOM_CENTER, "Guest Wi-Fi");

touchscreen:
  - platform: gt911
    i2c_id: bus_a
    address: 0x5D
    id: gt911_touchscreen
    interrupt_pin:
      number: GPIO3
      ignore_strapping_warning: true
    on_touch:
      - lambda: id(led).turn_on().set_brightness(id(lcd_default_bightness).state /100).perform();
    on_release:
      - script.execute: saver_enabled 
    
binary_sensor:
  # Hardware mute switch (Top of the device)
  - platform: gpio
    id: hardware_mute_switch
    internal: true
    pin: GPIO1
    filters:
      - invert:
    on_press:
      #- script.execute:
      #    id: play_sound
      #    priority: false
      #    sound_file: !lambda return id(mute_switch_on_sound);
      - switch.template.publish:
          id: mic_mute_switch
          state: ON
      - component.update: s3_box_lcd
    on_release:
      #- script.execute:
      #    id: play_sound
      #    priority: false
      #    sound_file: !lambda return id(mute_switch_off_sound);
      - switch.template.publish:
          id: mic_mute_switch
          state: OFF
      - component.update: s3_box_lcd

  ##### top left hand physical button #####
  - platform: gpio
    id: top_left_button
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
      ignore_strapping_warning: true
    internal: true
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - switch.turn_off: timer_ringing
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn
            
  ##### red circle home button #####
  - platform: gt911
    id: home_button
    index: 0
    on_press:
      if:
        condition:
          - display.is_displaying_page: home_page  
        then:
          - script.execute: saver_enabled
        else: 
          - lambda: id(led).turn_on().set_brightness(id(lcd_default_bightness).state /100).perform();
          - display.page.show: home_page
          - component.update: s3_box_lcd

  ##### status bar buttons #####             
  - platform: touchscreen
    pages:
      - home_page
      - info_page
      - settings_page
      - device_set_page
      - wifi_page
      - guest_wifi_page
    id: status_bar_1
    x_min: 9
    x_max: 55
    y_min: 10
    y_max: 55
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: info_page
        - component.update: s3_box_lcd
  - platform: touchscreen
    pages:
      - home_page
      - info_page
      - settings_page  
      - device_set_page
      - wifi_page
      - guest_wifi_page
    id: status_bar_2
    internal: true
    x_min: 73
    x_max: 119
    y_min: 10
    y_max: 55
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: wifi_page
        - component.update: s3_box_lcd
  - platform: touchscreen
    pages:
      - home_page
      - info_page
      - settings_page
      - device_set_page
      - wifi_page
      - guest_wifi_page
    id: status_bar_3
    internal: true
    x_min: 137
    x_max: 183
    y_min: 10
    y_max: 55
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.toggle: mic_mute_switch
        - component.update: s3_box_lcd
  - platform: touchscreen
    pages:
      - home_page
      - info_page
      - settings_page
      - device_set_page
      - wifi_page
      - guest_wifi_page
    id: status_bar_4
    internal: true
    x_min: 201
    x_max: 247
    y_min: 10
    y_max: 55
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.toggle: speaker_mute_switch
        - component.update: s3_box_lcd
  - platform: touchscreen
    pages:
      - home_page
      - info_page
      - settings_page
      - device_set_page
      - wifi_page
      - guest_wifi_page
    name: status_bar_5
    internal: true
    x_min: 265
    x_max: 311
    y_min: 10
    y_max: 55
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: settings_page
        - component.update: s3_box_lcd  

  ##### settings page ####
  - platform: touchscreen
    page_id: settings_page
    id: voice_set
    internal: true
    x_min: 5
    x_max: 105
    y_min: 100
    y_max: 165
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: ww_set_page
        - component.update: s3_box_lcd
  - platform: touchscreen
    page_id: settings_page
    id: ss_set
    internal: true
    x_min: 110
    x_max: 210
    y_min: 100
    y_max: 165
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: ss_set_page
        - component.update: s3_box_lcd
  - platform: touchscreen
    page_id: settings_page
    id: info_set
    internal: true
    x_min: 215
    x_max: 315
    y_min: 100
    y_max: 165
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: info_page
        - component.update: s3_box_lcd
  - platform: touchscreen
    page_id: settings_page
    id: device_set
    internal: true
    x_min: 5
    x_max: 105
    y_min: 175
    y_max: 240
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: device_set_page
        - component.update: s3_box_lcd
  - platform: touchscreen
    page_id: settings_page
    id: voice_test 
    internal: true
    x_min: 215
    x_max: 315
    y_min: 175
    y_max: 240
    on_press:
      then:
        - switch.turn_on: mic_mute_switch
        - lambda: id(va).set_use_wake_word(false);
        - delay: 100ms
        - voice_assistant.start 
        - wait_until:
            not:
              - voice_assistant.is_running
        - voice_assistant.stop
    on_release:
      then:
        - switch.turn_off: mic_mute_switch    
        - component.update: s3_box_lcd
  - platform: touchscreen
    pages:
      - device_set_page
    id: back_button
    internal: true
    x_min: 5
    x_max: 105
    y_min: 175
    y_max: 240
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: settings_page
        - component.update: s3_box_lcd
  
  ##### idle / home page #####
  - platform: touchscreen
    page_id: home_page
    name: Volume Minus
    id: control_1
    internal: true
    x_min: 5
    x_max: 105
    y_min: 90
    y_max: 170
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - logger.log: "Volume Minus pressed"
        - lambda: |-
            if (id(speaker_volume) > 0) {
              id(speaker_volume) -= 1;
            }
        - component.update: s3_box_lcd
        - script.execute: set_volume
  - platform: touchscreen
    page_id: home_page
    name: Play Pause
    id: control_2
    internal: true
    x_min: 110
    x_max: 210
    y_min: 90
    y_max: 170
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              media_player.is_idle:
            then:
              - media_player.play
            else:
              - media_player.pause
        - logger.log: "Play Paused pressed"
  - platform: touchscreen
    page_id: home_page
    name: Volume Plus
    id: control_3
    internal: true
    x_min: 215
    x_max: 315
    y_min: 90
    y_max: 170
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - logger.log: "Volume Plus pressed"
        - lambda: |-
            if (id(speaker_volume) < 10) {
              id(speaker_volume) += 1;
            }
        - component.update: s3_box_lcd
        - script.execute: set_volume
  - platform: touchscreen
    page_id: home_page
    id: control_4
    internal: true
    x_min: 265
    x_max: 311
    y_min: 185
    y_max: 230
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: guest_wifi_page
        - component.update: s3_box_lcd  

  ##### Screensaver Settings #####            
  - platform: touchscreen
    page_id: ss_set_page
    id: ss_timeout
    internal: true
    x_min: 250
    x_max: 315
    y_min: 115
    y_max: 145
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: timeout_settings_page
        - component.update: s3_box_lcd
  - platform: touchscreen
    page_id: ss_set_page
    id: ss_toggle
    internal: true
    x_min: 250
    x_max: 315
    y_min: 150
    y_max: 175
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.toggle: lcd_idle_switch
        - component.update: s3_box_lcd
  - platform: touchscreen
    page_id: ss_set_page
    id: ss_toggle_blank
    internal: true
    x_min: 250
    x_max: 315
    y_min: 210
    y_max: 235
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.toggle: lcd_off_switch
        - component.update: s3_box_lcd   
        
  ##### voice settings page #####
  - platform: touchscreen
    page_id: ww_set_page
    id: mute_response
    internal: true
    x_min: 250
    x_max: 315
    y_min: 145
    y_max: 170
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.toggle: response_mute_switch  
        - component.update: s3_box_lcd
  # TODO - Disabled until able to support wake sound
  #- platform: touchscreen
  #  page_id: ww_set_page
  #  id: ww_wake_sound
  #  internal: true
  #  x_min: 250
  #  x_max: 315
  #  y_min: 180
  #  y_max: 205
  #  on_click:
  #    min_length: 10ms
  #    max_length: 500ms
  #    then:
  #      - switch.toggle: wake_sound
  #      - component.update: s3_box_lcd
  - platform: touchscreen
    page_id: ww_set_page
    id: ww_toggle_conv
    internal: true
    x_min: 250
    x_max: 315
    y_min: 210
    y_max: 235
    on_click:
        - switch.toggle: display_conversation_switch
        - component.update: s3_box_lcd

  ##### touch to wake screen #####
  - platform: touchscreen
    page_id: saver_page
    id: ss_wake
    internal: true
    x_min: 0
    x_max: 320
    y_min: 0
    y_max: 240
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: home_page
        - component.update: s3_box_lcd

  ##### Timer finished page #####
  - platform: touchscreen
    page_id: timer_finished_page
    id: timer_dismiss
    internal: true
    x_min: 0
    x_max: 320
    y_min: 0
    y_max: 240
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.turn_off: timer_ringing
        - display.page.show: home_page
        - component.update: s3_box_lcd

  ##### Timeout settings buttons #####
  - id: ss_sleep_down
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 25
    x_max: 60
    y_min: 105
    y_max: 140
    on_press:
      then:
        - lambda: |-
            int sleep = id(lcd_idle_delay).state - 5;
            if (sleep < 1) {
              sleep = 1;
            }
            auto call = id(lcd_idle_delay).make_call();
            call.set_value(sleep);
            call.perform();
        - component.update: s3_box_lcd
  - id: ss_sleep_up
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 110
    x_max: 145
    y_min: 105
    y_max: 140
    on_press:
      then:
        - lambda: |-
            int sleep = id(lcd_idle_delay).state + 5;
            auto call = id(lcd_idle_delay).make_call();
            call.set_value(sleep);
            call.perform();
        - component.update: s3_box_lcd
  - id: ss_blank_down
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 25
    x_max: 60
    y_min: 180
    y_max: 220
    on_press:
      then:
        - lambda: |-
            int sleep = id(lcd_off_delay).state - 5;
            if (sleep < 1) {
              sleep = 1;
            }
            auto call = id(lcd_off_delay).make_call();
            call.set_value(sleep);
            call.perform();
        - component.update: s3_box_lcd
  - id: ss_blank_up
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 110
    x_max: 145
    y_min: 180
    y_max: 220
    on_press:
      then:
        - lambda: |-
            int sleep = id(lcd_off_delay).state + 5;
            auto call = id(lcd_off_delay).make_call();
            call.set_value(sleep);
            call.perform();
        - component.update: s3_box_lcd
  - id: ss_bright_down
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 165
    x_max: 195
    y_min: 105
    y_max: 140
    on_press:
      then:
        - lambda: |-
            int bright = id(lcd_idle_bightness).state - 5;
            if (bright < 1) {
              bright = 1;
            }
            auto call = id(lcd_idle_bightness).make_call();
            call.set_value(bright);
            call.perform();
        - component.update: s3_box_lcd
  - id: ss_bright_up
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 260
    x_max: 295
    y_min: 105
    y_max: 140
    on_press:
      then:
        - lambda: |-
            int bright = id(lcd_idle_bightness).state + 5;
            auto call = id(lcd_idle_bightness).make_call();
            call.set_value(bright);
            call.perform();
        - component.update: s3_box_lcd

  ##### device settings page #####
  - id: s_default_bright_down
    page_id: device_set_page
    platform: touchscreen
    internal: true
    x_min: 280
    x_max: 320
    y_min: 125
    y_max: 165
    on_press:
      then:
        - lambda: |-
            int default_bright = id(lcd_default_bightness).state - 5;
            if (default_bright < 1) {
              default_bright = 1;
            }
            auto call = id(lcd_default_bightness).make_call();
            call.set_value(default_bright);
            call.perform();
        - component.update: s3_box_lcd
  - id: s_default_bright_up
    page_id: device_set_page
    platform: touchscreen
    internal: true
    x_min: 155
    x_max: 195
    y_min: 125
    y_max: 165
    on_press:
      then:
        - lambda: |-
            int default_bright = id(lcd_default_bightness).state + 5;
            auto call = id(lcd_default_bightness).make_call();
            call.set_value(default_bright);
            call.perform();
        - component.update: s3_box_lcd
  - platform: touchscreen
    page_id: device_set_page
    id: chang_display_format
    x_min: 200
    x_max: 260
    y_min: 175
    y_max: 210
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - select.operation:
            id: time_format
            operation: Next
            cycle: true   
        - component.update: s3_box_lcd
################## config end ############################
